{"ast":null,"code":"import _defineProperty from \"C:\\\\it\\\\MyFirstProject\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { authAPI } from \"../API/API\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'auth_SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return _objectSpread({}, state, {}, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  const response = await authAPI.authMe();\n\n  if (response.data.resultCode === 0) {\n    let _response$data$data = response.data.data,\n        id = _response$data$data.id,\n        email = _response$data$data.email,\n        login = _response$data$data.login;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  const response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCaptchaUrl();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport const logout = () => async dispatch => {\n  const response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData(null, null, null, false));\n  }\n\n  ;\n};\nexport default AuthReducer;","map":{"version":3,"sources":["C:/it/MyFirstProject/src/redux/AuthReducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","userId","email","login","isAuth","captchaUrl","AuthReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthUserData","dispatch","response","authMe","data","resultCode","id","password","rememberMe","message","messages","length","_error","getCaptchaUrl","securityAPI","url","logout"],"mappings":"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","sourcesContent":["import {authAPI} from \"../API/API\";\r\nimport {stopSubmit} from \"redux-form\"\r\n\r\nconst SET_USER_DATA = 'auth_SET_USER_DATA';\r\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl:null\r\n\r\n}\r\n\r\nconst AuthReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA, payload: {userId, email, login, isAuth}\r\n})\r\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\r\n})\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    const response = await authAPI.authMe();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    const response = await authAPI.login(email, password, rememberMe)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n}\r\nexport const getCaptchaUrl = () => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n        dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\n\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    const response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData(null, null, null, false))\r\n    }\r\n    ;\r\n}\r\n\r\n\r\nexport default AuthReducer;"]},"metadata":{},"sourceType":"module"}