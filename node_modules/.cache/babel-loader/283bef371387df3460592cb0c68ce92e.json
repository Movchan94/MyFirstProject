{"ast":null,"code":"var _jsxFileName = \"C:\\\\it\\\\MyFirstProject\\\\src\\\\components\\\\Profile\\\\ProfileContainer.jsx\";\nimport React from 'react';\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { getStatus, getUserProfile, savePhoto, updateStatus } from \"../../redux/ProfileReducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.match.params.userId;\n\n    if (!userId) {\n      userId = this.props.authorizedUserId;\n\n      if (!userId) {\n        this.props.history.push('/login');\n      }\n    }\n\n    this.props.getUserProfile(userId);\n    this.props.getStatus(userId);\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.userId != prevProps.match.params.userI) this.refreshProfile();\n  }\n\n  render() {\n    return React.createElement(Profile, Object.assign({}, this.props, {\n      isOwner: !this.props.match.params.userId,\n      profile: this.props.profile,\n      status: this.props.status,\n      updateStatus: this.props.updateStatus,\n      savePhoto: this.props.savePhoto,\n      saveProfile: this.props.saveProfile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n});\n\nexport default compose(connect(mapStateToProps, {\n  getUserProfile,\n  getStatus,\n  updateStatus,\n  savePhoto,\n  saveProfile\n}), withRouter, withAuthRedirect)(ProfileContainer);","map":{"version":3,"sources":["C:/it/MyFirstProject/src/components/Profile/ProfileContainer.jsx"],"names":["React","Profile","connect","getStatus","getUserProfile","savePhoto","updateStatus","withRouter","withAuthRedirect","compose","ProfileContainer","Component","refreshProfile","userId","props","match","params","authorizedUserId","history","push","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","userI","render","profile","status","saveProfile","mapStateToProps","state","profilePage","auth","isAuth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SACIC,SADJ,EAEIC,cAFJ,EAEoBC,SAFpB,EAGIC,YAHJ,QAIO,4BAJP;AAKA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,gBAAR,QAA+B,4BAA/B;AACA,SAAQC,OAAR,QAAsB,OAAtB;;AAGA,MAAMC,gBAAN,SAA+BV,KAAK,CAACW,SAArC,CAA+C;AAC3CC,EAAAA,cAAc,GAAG;AACb,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAArC;;AACA,QAAI,CAACA,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,KAAKC,KAAL,CAAWG,gBAApB;;AACA,UAAI,CAACJ,MAAL,EAAa;AACT,aAAKC,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AAEH;AACJ;;AACD,SAAKL,KAAL,CAAWV,cAAX,CAA0BS,MAA1B;AACA,SAAKC,KAAL,CAAWX,SAAX,CAAqBU,MAArB;AACH;;AAEDO,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,cAAL;AACH;;AAEDS,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,QAAvB,EAAiC;AAC/C,QAAG,KAAKV,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAAxB,IAAkCS,SAAS,CAACP,KAAV,CAAgBC,MAAhB,CAAuBS,KAA5D,EACA,KAAKb,cAAL;AACH;;AAEDc,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,OAAD,oBAAa,KAAKZ,KAAlB;AACI,MAAA,OAAO,EAAI,CAAE,KAAKA,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MADzC;AAES,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWa,OAF7B;AAGS,MAAA,MAAM,EAAE,KAAKb,KAAL,CAAWc,MAH5B;AAIS,MAAA,YAAY,EAAE,KAAKd,KAAL,CAAWR,YAJlC;AAKS,MAAA,SAAS,EAAI,KAAKQ,KAAL,CAAWT,SALjC;AAMS,MAAA,WAAW,EAAI,KAAKS,KAAL,CAAWe,WANnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ;AAUH;;AAlC0C;;AAsC/C,IAAIC,eAAe,GAAIC,KAAD,KAAY;AAC9BJ,EAAAA,OAAO,EAAEI,KAAK,CAACC,WAAN,CAAkBL,OADG;AAE9BC,EAAAA,MAAM,EAAEG,KAAK,CAACC,WAAN,CAAkBJ,MAFI;AAG9BX,EAAAA,gBAAgB,EAAEc,KAAK,CAACE,IAAN,CAAWpB,MAHC;AAI9BqB,EAAAA,MAAM,EAAEH,KAAK,CAACE,IAAN,CAAWC;AAJW,CAAZ,CAAtB;;AAQA,eAAezB,OAAO,CAClBP,OAAO,CAAC4B,eAAD,EAAkB;AAAC1B,EAAAA,cAAD;AAAiBD,EAAAA,SAAjB;AAA4BG,EAAAA,YAA5B;AAAyCD,EAAAA,SAAzC;AAAoDwB,EAAAA;AAApD,CAAlB,CADW,EAElBtB,UAFkB,EAGlBC,gBAHkB,CAAP,CAIbE,gBAJa,CAAf","sourcesContent":["import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile, savePhoto,\r\n    updateStatus\r\n} from \"../../redux/ProfileReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userI)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner = {! this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto = {this.props.savePhoto}\r\n                     saveProfile = {this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus,savePhoto, saveProfile }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}