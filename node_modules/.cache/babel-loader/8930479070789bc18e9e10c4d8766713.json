{"ast":null,"code":"var _jsxFileName = \"C:\\\\it\\\\MyFirstProject\\\\src\\\\components\\\\common\\\\Paginator\\\\Paginator.jsx\";\nimport React, { useState } from 'react';\nimport styles from './Paginator.module.css';\n\nlet Paginator = ({\n  totalUsersCount,\n  pageSize,\n  currentPage,\n  onPageChanged\n  /*, portionSize = 10*/\n\n}) => {\n  let pagesCount = Math.ceil(totalUsersCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n  /*    let portionCount = Math.ceil(pagesCount / portionSize)\r\n      let [portionNumber, setPortionNumber] = useState(1)\r\n      let leftPortionNumber = (portionNumber - 1) * portionSize + 1\r\n      let rightPortionPageNumber = portionNumber * portionSize*/\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, portionNumber > 1 && React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber - 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Prev\"), pages.filter(p => p >= leftPortionNumber && p <= rightPortionPageNumber).map(p => {\n    return React.createElement(\"span\", {\n      className: currentPage === p && styles.selectedPage,\n      onClick: e => {\n        onPageChanged(p);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \" \", p, \" \");\n  }), portionCount > portionNumber && React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Next\"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["C:/it/MyFirstProject/src/components/common/Paginator/Paginator.jsx"],"names":["React","useState","styles","Paginator","totalUsersCount","pageSize","currentPage","onPageChanged","pagesCount","Math","ceil","pages","i","push","portionNumber","setPortionNumber","filter","p","leftPortionNumber","rightPortionPageNumber","map","selectedPage","e","portionCount"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;AAGA,IAAIC,SAAS,GAAG,CAAC;AAACC,EAAAA,eAAD;AAAkBC,EAAAA,QAAlB;AAA4BC,EAAAA,WAA5B;AAAyCC,EAAAA;AAAa;;AAAtD,CAAD,KAAmF;AAC/F,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUN,eAAe,GAAGC,QAA5B,CAAjB;AACA,MAAIM,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;AACL;;;;;;AAMI,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,aAAa,GAAG,CAAhB,IACD;AAAQ,IAAA,OAAO,EAAE,MAAM;AACnBC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAKKH,KAAK,CACDK,MADJ,CACWC,CAAC,IAAIA,CAAC,IAAIC,iBAAL,IAA0BD,CAAC,IAAIE,sBAD/C,EAEIC,GAFJ,CAEQH,CAAC,IAAI;AACN,WAAO;AACH,MAAA,SAAS,EAAEX,WAAW,KAAKW,CAAhB,IAAqBf,MAAM,CAACmB,YADpC;AAEH,MAAA,OAAO,EAAGC,CAAD,IAAO;AACZf,QAAAA,aAAa,CAACU,CAAD,CAAb;AACH,OAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAIEA,CAJF,MAAP;AAKH,GARJ,CALL,EAcKM,YAAY,GAAGT,aAAf,IACD;AAAQ,IAAA,OAAO,EAAE,MAAM;AACnBC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfJ,CADJ;AAsBH,CAlCD;;AAoCA,eAAeX,SAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport styles from './Paginator.module.css';\r\n\r\n\r\nlet Paginator = ({totalUsersCount, pageSize, currentPage, onPageChanged/*, portionSize = 10*/}) => {\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n/*    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize*/\r\n\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span\r\n                        className={currentPage === p && styles.selectedPage}\r\n                        onClick={(e) => {\r\n                            onPageChanged(p)\r\n                        }}> {p} </span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;\r\n\r\n"]},"metadata":{},"sourceType":"module"}