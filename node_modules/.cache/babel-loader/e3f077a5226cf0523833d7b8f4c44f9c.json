{"ast":null,"code":"var _jsxFileName = \"C:\\\\it\\\\MyFirstProject\\\\src\\\\components\\\\common\\\\Paginator\\\\Paginator.jsx\";\nimport React, { useState } from 'react';\nimport styles from './Paginator.module.css';\n/*let Paginator = ({totalItemCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n   let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span\r\n                        className={currentPage === p && styles.selectedPage}\r\n                        onClick={(e) => {\r\n                            onPageChanged(p)\r\n                        }}> {p} </span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n\r\n        </div>\r\n    )\r\n}*/\n\nlet Paginator = ({\n  totalItemCount,\n  pageSize,\n  currentPage,\n  onPageChanged,\n  portionSize = 10\n}) => {\n  let pagesCount = Math.ceil(totalItemCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, pages.map(p => {\n    return React.createElement(\"span\", {\n      className: currentPage === p && styles.selectedPage,\n      onClick: e => {\n        onPageChanged(p);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \" \", p, \" \");\n  }));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["C:/it/MyFirstProject/src/components/common/Paginator/Paginator.jsx"],"names":["React","useState","styles","Paginator","totalItemCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","map","p","selectedPage","e"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAIC,SAAS,GAAG,CAAC;AAACC,EAAAA,cAAD;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA,WAA3B;AAAwCC,EAAAA,aAAxC;AAAuDC,EAAAA,WAAW,GAAG;AAArE,CAAD,KAA8E;AAC1F,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUP,cAAc,GAAGC,QAA3B,CAAjB;AACA,MAAIO,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AAGD,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CACDG,GADJ,CACQC,CAAC,IAAI;AACN,WAAO;AACH,MAAA,SAAS,EAAEV,WAAW,KAAKU,CAAhB,IAAqBd,MAAM,CAACe,YADpC;AAEH,MAAA,OAAO,EAAGC,CAAD,IAAO;AACZX,QAAAA,aAAa,CAACS,CAAD,CAAb;AACH,OAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAIEA,CAJF,MAAP;AAKH,GAPJ,CADL,CADJ;AAYH,CApBD;;AAsBA,eAAeb,SAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport styles from './Paginator.module.css';\r\n\r\n\r\n/*let Paginator = ({totalItemCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n   let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n\r\n    return (\r\n        <div>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>Prev</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span\r\n                        className={currentPage === p && styles.selectedPage}\r\n                        onClick={(e) => {\r\n                            onPageChanged(p)\r\n                        }}> {p} </span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n\r\n        </div>\r\n    )\r\n}*/\r\nlet Paginator = ({totalItemCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {pages\r\n                .map(p => {\r\n                    return <span\r\n                        className={currentPage === p && styles.selectedPage}\r\n                        onClick={(e) => {\r\n                            onPageChanged(p)\r\n                        }}> {p} </span>\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;\r\n\r\n"]},"metadata":{},"sourceType":"module"}